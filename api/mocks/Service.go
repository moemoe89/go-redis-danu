// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import time "time"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *Service) Delete(key string) (int, error) {
	ret := _m.Called(key)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *Service) Get(key string) (string, int, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHSet provides a mock function with given fields: key, field
func (_m *Service) GetHSet(key string, field string) (string, int, error) {
	ret := _m.Called(key, field)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(key, field)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(key, field)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSAdd provides a mock function with given fields: key
func (_m *Service) GetSAdd(key string) ([]string, int, error) {
	ret := _m.Called(key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HSet provides a mock function with given fields: key, field, value
func (_m *Service) HSet(key string, field string, value string) (bool, int, error) {
	ret := _m.Called(key, field, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(key, field, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, string) int); ok {
		r1 = rf(key, field, value)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(key, field, value)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SAdd provides a mock function with given fields: key, value
func (_m *Service) SAdd(key string, value ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...interface{}) int); ok {
		r0 = rf(key, value...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(key, value...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, exp
func (_m *Service) Set(key string, value interface{}, exp time.Duration) (int, error) {
	ret := _m.Called(key, value, exp)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) int); ok {
		r0 = rf(key, value, exp)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}, time.Duration) error); ok {
		r1 = rf(key, value, exp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
